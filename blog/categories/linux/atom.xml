<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Jarvis Zhang's Blog]]></title>
  <link href="http://JarvisZhang.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://JarvisZhang.github.io/"/>
  <updated>2014-09-17T20:06:13+08:00</updated>
  <id>http://JarvisZhang.github.io/</id>
  <author>
    <name><![CDATA[Jarvis Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于Linux服务器安全防护的基本方法]]></title>
    <link href="http://JarvisZhang.github.io/blog/2014/09/16/basic-ways-to-protect-linux-server/"/>
    <updated>2014-09-16T13:38:08+08:00</updated>
    <id>http://JarvisZhang.github.io/blog/2014/09/16/basic-ways-to-protect-linux-server</id>
    <content type="html"><![CDATA[<h1>楔子</h1>

<p>服务器的安全防护一直以来都是老生长谈的话题，虽然我们平时接触的服务器影响力一般，不会被攻击者处心积虑利用各种漏洞攻击，但做一些基本的防护措施还是很有必要的，可以避免那些常年活跃在互联网上的自动化攻击。</p>

<p>曾有国外安全研究者做过实验，他们搭建了一台蜜罐服务器，该服务上安装了修改后的SSHD版本，记录所有的登陆尝试和存储的所有会话，一旦被黑客攻击，可以查看到所有暴力破解尝试记录，<a href="http://blog.sucuri.net/2013/07/ssh-brute-force-the-10-year-old-attack-that-still-persists.html">实验结果</a>也非常有趣。</p>

<p>SSH暴力破解大约自linux系列产品诞生之后，就衍生出来的一种攻击行为，不仅仅SSH暴力破解，ftp、telnet、smtp、mysql等等都是暴力美学黑客的最爱。</p>

<p>本文总结了一些Linux服务器的基本防护方法，可以有效应对大部分普通网络攻击。实验操作系统版本为CentOS 6</p>

<h1>修改ssh默认端口22</h1>

<p>众所周知，ssh的默认端口为22，这成为了攻击者的首要目标，同时也会引入大量的错误日志。TCP/IP协议中的端口，端口号的范围从0到65535，我们可以指定一个作为ssh登陆端口，注意不要与其它服务冲突。</p>

<p>ssh服务配置文件为/etc/ssh/sshd_config，可以看到端口号指定的配置被注释了，默认为22</p>

<blockquote><p>#Port 22</p></blockquote>

<p>在配置文件中增加一行<code>Port 12345</code>后，重启ssh服务<code>service sshd restart</code>，此时，ssh端口改为了12345，登陆时需要额外指定<code>ssh -p 12345 mytestuser@mytestserver</code>。</p>

<h1>使用Fail2Ban</h1>

<p>fail2ban是一个通过监控日志，防止系统密码被暴力破解的工具，它支持大部分常用服务，如sshd, apache, qmail, proftpd, sasl, asterisk等等，当发现服务器有被暴力破解的迹象时，fail2ban会采取多种手段进行应对，如iptables, tcp-wrapper, shorewall, mail notifications等等。</p>

<h3>安装依赖</h3>

<h5>必选</h5>

<ul>
<li>Python >= 2.4</li>
</ul>


<h5>可选</h5>

<ul>
<li>iptables</li>
<li>shorewall</li>
<li>tcp-wrappers</li>
<li>a working mail command</li>
<li>Gamin the File Alteration Monitor</li>
</ul>


<h3>安装步骤</h3>

<ol>
<li><p>官网下载地址</p>

<p> <a href="http://www.fail2ban.org/wiki/index.php/Downloads">http://www.fail2ban.org/wiki/index.php/Downloads</a></p></li>
<li><p>解压及安装</p>

<pre><code> [root@jsi-dell13 downloads]# tar xzvf 0.8.14.tar.gz
 [root@jsi-dell13 downloads]# cd fail2ban-0.8.14/
 [root@jsi-dell13 fail2ban-0.8.14]# ./setup.py install
 [root@jsi-dell13 fail2ban-0.8.14]# cp files/redhat-initd /etc/init.d/fail2ban
 [root@jsi-dell13 fail2ban-0.8.14]# chmod 755 /etc/init.d/fail2ban 
</code></pre></li>
<li><p>配置开机启动</p>

<pre><code> [root@jsi-dell13 fail2ban-0.8.14]# ln -s /etc/init.d/fail2ban /etc/rc2.d/S20fail2ban
</code></pre></li>
<li><p>配置日志轮询</p>

<p> 创建文件/etc/logrotate.d/fail2ban，写入</p>

<blockquote><p>/var/log/fail2ban.log {</p>

<p>weekly</p>

<p>rotate 7</p>

<p>missingok</p>

<p>compress</p>

<p>postrotate</p>

<p>/usr/bin/fail2ban-client set logtarget /var/log/fail2ban.log >/dev/null</p>

<p>endscript</p>

<p>}</p></blockquote></li>
<li><p>防止ssh字典攻击</p>

<p> 修改配置文件/etc/fail2ban/jail.conf如下</p>

<blockquote><p>[ssh-iptables]</p>

<p>#enabled  = false</p>

<p>enabled  = true</p>

<p>filter   = sshd</p>

<p>action   = iptables[name=SSH, port=ssh, protocol=tcp]</p>

<p>&emsp;&emsp;&emsp;&emsp;sendmail-whois[name=SSH, dest=you@example.com,</p>

<p>&emsp;&emsp;&emsp;&emsp;sender=fail2ban@example.com, sendername=&ldquo;Fail2Ban&rdquo;]</p>

<p>#logpath  = /var/log/sshd.log</p>

<p>logpath  = /var/log/secure</p>

<p>maxretry = 5</p></blockquote>

<p> 以上配置的含义为对于在(findtime)600s内输错5次密码的ip，使用iptables将该ip屏蔽(bandtime)600s。其中findtime和bandtime均可以通过配置修改。详情参见fail2ban<a href="http://www.fail2ban.org/wiki/index.php/MANUAL_0_8">官方手册</a></p></li>
</ol>


<h1>禁止root用户通过ssh方式登陆</h1>

<p>root用户几乎是所有类UNIX系统中都存在的用户，攻击者也常常使用root用户暴力攻击，如果不禁止root远程ssh登陆，攻击者获取密码只是时间问题。</p>

<p>编辑文件/etc/ssh/sshd_config，修改配置选项为<code>PermitRootLogin no</code>，重启ssh服务<code>service sshd restart</code></p>

<p>提示：请确保服务器上还有其它可ssh登录的用户，创建用户步骤如下：</p>

<pre><code>[root@JSI-iDPL02 ~]# useradd jsitest
[root@JSI-iDPL02 ~]# passwd jsitest
</code></pre>

<h1>使用公钥密钥的认证方式</h1>

<p>RSA加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。</p>

<p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个相同的算法，但他的发现被列入机密，一直到1997年才被发表。</p>

<p>对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到2013年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。</p>

<p>具体步骤为：</p>

<ol>
<li><p>生成公钥密钥</p>

<pre><code> [root@JSI-iDPL02 ~]# ssh-keygen -C "jsitest@JSI-iDPL02" -t rsa -b 2048 -f jsitest-JSI-iDPL02
 Generating public/private rsa key pair.
 Enter passphrase (empty for no passphrase): 

 Enter same passphrase again: 

 Your identification has been saved in jsitest-JSI-iDPL02.

 Your public key has been saved in jsitest-JSI-iDPL02.pub.
 The key fingerprint is:
 96:bb:d0:67:11:c8:dc:be:bd:6d:00:7c:59:63:e3:3a jsitest@JSI-iDPL02
 The key's randomart image is:
 +--[ RSA 2048]----+
 |                 |
 |       o o    =  |
 |        +.o  = o |
 |         oo.o .  |
 |        S oo .   |
 |       o . +E    |
 |      . o + .o   |
 |       . +   o.  |
 |        .   ...  |
 +-----------------+
</code></pre>

<p> Enter passphrase的输入为加密所用的字符串，可以视安全强度决定是否置空。</p>

<p> 各参数含义为：</p>

<ul>
<li><p>-C 是对密钥的一个说明，有助于区分不同的密钥用途。</p></li>
<li><p>-t 和 -b 分别指定要生成的密钥类型和密钥长度。</p></li>
<li><p>-f 指定生成的密钥对文件名。公钥文件名为jsitest-JSI-iDPL02.pub，私钥为jsitest-JSI-iDPL02。</p></li>
</ul>


<p> 更多参数请参考ssh-keygen手册</p></li>
<li><p>当前目录下分别生成了公钥jsitest-JSI-iDPL02.pub以及密钥jsitest-JSI-iDPL02，将<strong>密钥拷贝至客户端</strong>备用，将<strong>公钥拷贝至服务器端</strong>备用</p></li>
<li><p>服务器端导入公钥，将对应的公钥加入到服务器上<strong>需要登录的用户</strong>的home目录下的.ssh/authorized_keys文件中</p>

<pre><code> [root@JSI-iDPL02 ~]# cd /home/jsitest/
 [root@JSI-iDPL02 jsitest]# mkdir .ssh
 [root@JSI-iDPL02 ~]# cat jsitest-JSI-iDPL02.pub &gt;&gt; /home/jsitest/.ssh/authorized_keys
</code></pre>

<p> 事实上authorized_keys文件的准确名字是由 sshd_config 中的 AuthorizedKeysFile 配置指定给定的。man sshd_config 获取详细的说明信息。</p>

<p> 注意：authorized_keys文件及其所在的目录以及父目录（一直上溯到该用户的HOME目录为止）的权限必须设置为不能被组和其他人写（可以通过<code>chmod og-w</code>确认），否则其他人只需要修改这个文件即可以以该身份登录到系统上。</p></li>
<li><p>OpenSSH服务端配置</p>

<p> OpenSSH服务器端配置文件一般为/etc/ssh/sshd_config，和公钥认证有关的两个配置项是：</p>

<pre><code> #RSAAuthentication yes
 #PubkeyAuthentication yes
</code></pre>

<p> 其缺省值一般为 yes。如果希望仅打开公钥认证，禁用其他的认证方式，则可以修改下列配置项：</p>

<pre><code> PasswordAuthentication no
 ChallengeResponseAuthentication no  
 UsePAM no
</code></pre>

<p> 重启ssh服务使修改生效</p>

<pre><code> service sshd restart
</code></pre></li>
<li><p>用户登录</p>

<p> 对 OpenSSH 客户端，可以通过<code>ssh -i jsitest-JSI-iDPL02 jsitest@JSI-iDPL</code>快速测试是否工作。</p>

<p> 更一般的方法是将私钥文件jsitest-JSI-iDPL02拷贝至客户端.ssh/目录下，设置.ssh/config配置对不同主机和用户进行配置。如下例：</p>

<pre><code> Host idpl3                                  #别名
     HostName 10.4.9.191                     #完整的域名
     User jsitest                            #登录该域名使用的账号名
     IdentityFile ~/.ssh/jsitest-JSI-iDPL03 #私钥文件的路径
</code></pre>

<p> 这样就可以简化登陆服务器的过程了：</p>

<pre><code> [root@JSI-iDPL03 ~]# ssh idpl2
 Enter passphrase for key '/root/.ssh/jsitest-JSI-iDPL02': 
 Last login: Wed Sep 17 14:38:05 2014 from jsi-idpl03
 [jsitest@JSI-iDPL02 ~]$
</code></pre></li>
</ol>


<h1>禁用ping</h1>

<p>很久以前，一部分操作系统(例如win95)，不能很好处理过大的Ping包，在当时，大部分电脑无法处理大于IPv4最大封包大小（65,535字节）的ping封包。因此发送这样大小的ping可以令目标电脑崩溃。导致出现了Ping to Death的攻击方式(用大Ping包搞垮对方或者塞满网络)，随着操作系统的升级，网络带宽的升级、计算机硬件的升级，大Ping包基本上没有很大的攻击效果(分布式攻击除外)，如果一定要使用Ping包去攻击别的主机，除非是利用TCP/IP协议的其他特性或者网络拓扑结构的缺陷放大攻击的力度(所谓正反馈)，就是俗称的洪水ping攻击。</p>

<p>不过，大部分机构，特别是一些超算中心还是会选择将服务器的ping功能禁掉，以避免不必要的麻烦。</p>

<p>禁用的方法有两种：</p>

<ul>
<li><p>修改文件/proc/sys/net/ipv4/icmp_echo_ignore_all</p>

<p>  不过这种方法只对ipv4有效，ipv6不提供此功能。</p>

<pre><code>  echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all
</code></pre></li>
<li><p>添加iptables规则</p>

<p>  对于ipv4，在/etc/sysconfig/iptables中增加：</p>

<blockquote><p>-A INPUT -j REJECT &mdash;reject-with icmp-host-prohibited</p></blockquote>

<p>  重启iptables</p>

<pre><code>  service iptables restart
</code></pre>

<p>  ipv6的配置文件是/etc/sysconfig/ip6tables，添加规则：</p>

<blockquote><p>-A INPUT -j REJECT &mdash;reject-with icmp6-adm-prohibited</p></blockquote>

<p>  重启ip6tables</p>

<pre><code>  service ip6tables restart
</code></pre></li>
</ul>


<p>至此，服务器不会相应任何ping消息。</p>

<h1>限制用户的su操作</h1>

<p>除了在外部做好防御边界，服务器内部同样需要做好权限管制，当用户需要对服务器进行一些权限较高的维护时，需要通过su切换到root用户，所以为了减少安全隐患，需要限制非管理员的su提权操作。</p>

<p>Linux中有wheel组和staff组的概念，wheel组就类似于管理员的组，只有在这个组中的用户才能进行su操作，否则即使知道root密码，也不能通过su命令切换到root用户。具体步骤为：</p>

<ol>
<li>修改/etc/pam.d/su文件，将<code>auth            required        pam_wheel.so use_uid</code>的注释去掉。</li>
<li>修改/etc/login.defs文件，增加一行<code>SU_WHEEL_ONLY yes</code>配置</li>
<li><p>将新用户jsitest添加到wheel组中</p>

<pre><code> usermod -G wheel jsitest
</code></pre></li>
</ol>


<p>至此，只有在wheel组中的用户才能通过su切换至root用户</p>

<h1>Reference</h1>

<p>[1] 四大Linux服务器攻击方式及防范策略[EB/OL]. <a href="http://www.enet.com.cn/article/2012/0815/A20120815150578.shtml">http://www.enet.com.cn/article/2012/0815/A20120815150578.shtml</a></p>

<p>[2] SSH Brute Force – The 10 Year Old Attack That Still Persists[EB/OL].  Daniel Cid. <a href="http://blog.sucuri.net/2013/07/ssh-brute-force-the-10-year-old-attack-that-still-persists.html">http://blog.sucuri.net/2013/07/ssh-brute-force-the-10-year-old-attack-that-still-persists.html</a></p>

<p>[3] 伪装攻击IP地址的洪水Ping攻击详解[EB/OL]. <a href="http://www.edu.cn/sqt_9968/20110318/t20110318_589483.shtml">http://www.edu.cn/sqt_9968/20110318/t20110318_589483.shtml</a></p>

<p>[4] SSH 公钥认证[EB/OL]. <a href="http://blog.knownsec.com/2012/05/ssh-%E5%85%AC%E9%92%A5%E8%AE%A4%E8%AF%81/">http://blog.knownsec.com/2012/05/ssh-%E5%85%AC%E9%92%A5%E8%AE%A4%E8%AF%81/</a></p>

<p>[5] fail2ban Main Page[EB/OL]. <a href="http://www.fail2ban.org/wiki/index.php/Main_Page">http://www.fail2ban.org/wiki/index.php/Main_Page</a></p>

<p>[6] 使用fail2ban防止暴力破解ssh及vsftpd密码[EB/OL]. <a href="https://www.centos.bz/2012/04/prevent-ssh-break-in-with-fail2ban/">https://www.centos.bz/2012/04/prevent-ssh-break-in-with-fail2ban/</a></p>

<p>[7] RSA加密算法[EB/OL]. <a href="http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95</a></p>
]]></content>
  </entry>
  
</feed>
