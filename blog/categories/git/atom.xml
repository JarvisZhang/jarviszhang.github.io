<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Jarvis Zhang's Blog]]></title>
  <link href="http://JarvisZhang.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://JarvisZhang.github.io/"/>
  <updated>2016-03-27T17:15:36+08:00</updated>
  <id>http://JarvisZhang.github.io/</id>
  <author>
    <name><![CDATA[Jarvis Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用rebase修改历史commit]]></title>
    <link href="http://JarvisZhang.github.io/blog/2014/05/12/shi-yong-rebasexiu-gai-li-shi-commit/"/>
    <updated>2014-05-12T22:32:17+08:00</updated>
    <id>http://JarvisZhang.github.io/blog/2014/05/12/shi-yong-rebasexiu-gai-li-shi-commit</id>
    <content type="html"><![CDATA[<p>最近在使用gerrit做code review，经常遇到的一个情况是需要更改已经commit的代码。</p>

<p>比如对于如下形式的branch tree:</p>

<pre><code>A -- B -- C -- D  (develop)
</code></pre>

<p>问题来了，gerrit上得到了反馈，C上的代码有问题，需要修改。而秉承着“一步一commit“的守则，已经有新的commit提交上去了，目前仓库和远程仓库的HEAD都指向了D。</p>

<p>虽然可以暂时把B merge进去，然后再直接提交一个新commit(E)去修复B上的bug的，但这显然不够优雅，而且把明知道有bug的commit也merge进去本身也是存在风险的，这时，git rebase就派上用场了。</p>

<p>整个主要过程分为四个步骤：</p>

<ol>
<li>修改C中的bug，commit到本地repo为E</li>
<li>输入命令<code>git rebase -i HEAD~3</code></li>
<li>根据提示，调整commit顺序，将最新的commit放到C之后，根据提示将pick改为squash，保存退出。（若存在冲突则处理并git add，继续<code>git rebase --continue</code>）</li>
<li><code>git push --force origin develop</code> # 假设目标分支为develop分支</li>
</ol>


<p>git rebase本来是用来处理分支衍合的，具体原理可以参考官方手册：</p>

<blockquote><p><a href="http://git-scm.com/book/en/Git-Branching-Rebasing">http://git-scm.com/book/en/Git-Branching-Rebasing</a></p></blockquote>

<p>这里我们实际做的是重新调整合并了当前分支的commit顺序，举个例子：</p>

<p>当前分支名为myrebase，文件rebase_test.py与两个commit相关：</p>

<pre><code># commit A
print ('hello rebase')
# commit B
print ('bye')
</code></pre>

<p>现欲在commit A增加为：</p>

<pre><code>print ('May 18th')
</code></pre>

<p>依次做以下操作：</p>

<ul>
<li>修改rabase_test.py</li>
<li><p>新提交一个commit C</p>

<p>  <code>git commit -am "fix on commit A"</code></p></li>
<li><p>使用命令</p>

<p>  <code>git rebase -i HEAD~3</code></p></li>
</ul>


<blockquote><p>-i 表示交互式rebase</p>

<p>HEAD~3 表示对HEAD之前的三次commit进行rebase</p></blockquote>

<p>也可以使用<code>git rebase -i $commit-id-before-commit-A</code></p>

<p>其中$commit-id-before-commit-A为commit A之前commit的id，结果如下：</p>

<blockquote><p>pick 5b55a02 first commit add hello rebase</p>

<p>pick 2f5c48f second commit add bye</p>

<p>pick 225e901 fix on commit A</p>

<p># Rebase 7f8e5eb..225e901 onto 7f8e5eb</p>

<p>#</p>

<p># Commands:</p>

<p>#  p, pick = use commit</p>

<p>#  r, reword = use commit, but edit the commit message</p>

<p>#  e, edit = use commit, but stop for amending</p>

<p>#  s, squash = use commit, but meld into previous commit</p>

<p>#  f, fixup = like &ldquo;squash&rdquo;, but discard this commit&rsquo;s log message</p>

<p>#  x, exec = run command (the rest of the line) using shell</p>

<p>#</p>

<p># These lines can be re-ordered; they are executed from top to bottom.</p>

<p>#</p>

<p># If you remove a line here THAT COMMIT WILL BE LOST.</p>

<p>#</p>

<p># However, if you remove everything, the rebase will > be aborted.</p>

<p>#</p>

<p># Note that empty commits are commented out</p></blockquote>

<ul>
<li>根据注释中对各参数的解释，将前三行改为</li>
</ul>


<blockquote><p>pick 5b55a02 first commit add hello rebase</p>

<p>squash 225e901 fix on commit A</p>

<p>pick 2f5c48f second commit add bye</p></blockquote>

<ul>
<li>若存在冲突，则处理冲突后<code>git commit add .</code>并<code>git rebase --continue</code></li>
<li>由于使用了squash参数，根据提示调整commit信息</li>
<li>看到rebase successful消息后，使用<code>git push --force origin myrebase</code></li>
</ul>


<p>整个过程有可能遇到很多问题，要多利用<code>git diff</code>和 <code>git log</code>来分析</p>
]]></content>
  </entry>
  
</feed>
